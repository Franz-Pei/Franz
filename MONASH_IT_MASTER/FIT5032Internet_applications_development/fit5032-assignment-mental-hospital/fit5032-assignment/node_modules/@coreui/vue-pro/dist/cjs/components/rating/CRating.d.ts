import { PropType } from 'vue';
declare const CRating: import("vue").DefineComponent<{
    /**
     * Enables the clearing upon clicking the selected item again.
     */
    allowClear: BooleanConstructor;
    /**
     * Toggle the disabled state for the component.
     */
    disabled: BooleanConstructor;
    /**
     * If enabled, only the currently selected icon will be visibly highlighted.
     */
    highlightOnlySelected: BooleanConstructor;
    /**
     * Specifies the total number of stars to be displayed in the star rating component. This property determines the scale of the rating, such as out of 5 stars, 10 stars, etc.
     */
    itemCount: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * The default name for a value passed using v-model.
     */
    modelValue: NumberConstructor;
    /**
     * The name attribute of the radio input elements.
     */
    name: StringConstructor;
    /**
     * Minimum increment value change allowed.
     */
    precision: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Toggle the readonly state for the component.
     */
    readOnly: BooleanConstructor;
    /**
     * Size the component small, large, or custom if you define custom icons with custom height.
     *
     * @values 'sm', 'lg', 'custom'
     */
    size: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Enable tooltips with default values or set specific labels for each icon.
     */
    tooltips: {
        type: PropType<boolean | string[]>;
    };
    /**
     * The `value` attribute of component.
     * */
    value: NumberConstructor;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "hover" | "update:modelValue")[], "change" | "hover" | "update:modelValue", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Enables the clearing upon clicking the selected item again.
     */
    allowClear: BooleanConstructor;
    /**
     * Toggle the disabled state for the component.
     */
    disabled: BooleanConstructor;
    /**
     * If enabled, only the currently selected icon will be visibly highlighted.
     */
    highlightOnlySelected: BooleanConstructor;
    /**
     * Specifies the total number of stars to be displayed in the star rating component. This property determines the scale of the rating, such as out of 5 stars, 10 stars, etc.
     */
    itemCount: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * The default name for a value passed using v-model.
     */
    modelValue: NumberConstructor;
    /**
     * The name attribute of the radio input elements.
     */
    name: StringConstructor;
    /**
     * Minimum increment value change allowed.
     */
    precision: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Toggle the readonly state for the component.
     */
    readOnly: BooleanConstructor;
    /**
     * Size the component small, large, or custom if you define custom icons with custom height.
     *
     * @values 'sm', 'lg', 'custom'
     */
    size: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Enable tooltips with default values or set specific labels for each icon.
     */
    tooltips: {
        type: PropType<boolean | string[]>;
    };
    /**
     * The `value` attribute of component.
     * */
    value: NumberConstructor;
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onHover?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    allowClear: boolean;
    highlightOnlySelected: boolean;
    itemCount: number;
    precision: number;
    readOnly: boolean;
}, {}>;
export { CRating };

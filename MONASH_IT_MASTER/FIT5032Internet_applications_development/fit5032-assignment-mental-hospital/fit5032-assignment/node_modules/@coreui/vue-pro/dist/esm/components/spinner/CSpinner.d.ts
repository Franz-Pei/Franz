declare const CSpinner: import("vue").DefineComponent<{
    /**
 * Component used for the root node. Either a string to use a HTML element or a component.
 */
    as: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Sets the color context of the component to one of CoreUI’s themed colors.
     *
     * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'
     */
    color: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Size the component small.
     *
     * @values 'sm'
     */
    size: {
        type: StringConstructor;
        validator: (value: string) => value is "sm";
    };
    /**
     * Set the button variant to an outlined button or a ghost button.
     *
     * @values 'border', 'grow'
     */
    variant: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * Set visually hidden label for accessibility purposes.
     */
    visuallyHiddenLabel: {
        type: StringConstructor;
        default: string;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
 * Component used for the root node. Either a string to use a HTML element or a component.
 */
    as: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Sets the color context of the component to one of CoreUI’s themed colors.
     *
     * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'
     */
    color: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Size the component small.
     *
     * @values 'sm'
     */
    size: {
        type: StringConstructor;
        validator: (value: string) => value is "sm";
    };
    /**
     * Set the button variant to an outlined button or a ghost button.
     *
     * @values 'border', 'grow'
     */
    variant: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * Set visually hidden label for accessibility purposes.
     */
    visuallyHiddenLabel: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    variant: string;
    as: string;
    visuallyHiddenLabel: string;
}, {}>;
export { CSpinner };

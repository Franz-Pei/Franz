import { PropType } from 'vue';
import type { Option } from './types';
declare const CMultiSelectSelection: import("vue").DefineComponent<{
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: StringConstructor;
    search: (StringConstructor | BooleanConstructor)[];
    selected: {
        type: PropType<Option[]>;
        default: () => never[];
    };
    selectionType: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    selectionTypeCounterText: {
        type: StringConstructor;
        default: string;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "remove"[], "remove", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: StringConstructor;
    search: (StringConstructor | BooleanConstructor)[];
    selected: {
        type: PropType<Option[]>;
        default: () => never[];
    };
    selectionType: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    selectionTypeCounterText: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onRemove?: ((...args: any[]) => any) | undefined;
}, {
    selectionType: string;
    selected: Option[];
    multiple: boolean;
    selectionTypeCounterText: string;
}, {}>;
export { CMultiSelectSelection };

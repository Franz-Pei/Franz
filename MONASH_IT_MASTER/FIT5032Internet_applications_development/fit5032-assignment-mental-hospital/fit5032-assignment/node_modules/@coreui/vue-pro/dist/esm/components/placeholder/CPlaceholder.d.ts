export declare const CPlaceholder: import("vue").DefineComponent<{
    /**
     * Set animation type to better convey the perception of something being actively loaded.
     *
     * @values 'glow', 'wave'
     */
    animation: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Component used for the root node. Either a string to use a HTML element or a component.
     */
    as: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Sets the color context of the component to one of CoreUI’s themed colors.
     *
     * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'
     */
    color: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Size the component extra small, small, or large.
     *
     * @values 'xs', 'sm', 'lg'
     */
    size: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * The number of columns on extra small devices (<576px).
     */
    xs: NumberConstructor;
    /**
     * The number of columns on small devices (<768px).
     */
    sm: NumberConstructor;
    /**
     * The number of columns on medium devices (<992px).
     */
    md: NumberConstructor;
    /**
     * The number of columns on large devices (<1200px).
     */
    lg: NumberConstructor;
    /**
     * The number of columns on X-Large devices (<1400px).
     */
    xl: NumberConstructor;
    /**
     * The number of columns on XX-Large devices (≥1400px).
     */
    xxl: NumberConstructor;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Set animation type to better convey the perception of something being actively loaded.
     *
     * @values 'glow', 'wave'
     */
    animation: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Component used for the root node. Either a string to use a HTML element or a component.
     */
    as: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Sets the color context of the component to one of CoreUI’s themed colors.
     *
     * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'
     */
    color: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Size the component extra small, small, or large.
     *
     * @values 'xs', 'sm', 'lg'
     */
    size: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * The number of columns on extra small devices (<576px).
     */
    xs: NumberConstructor;
    /**
     * The number of columns on small devices (<768px).
     */
    sm: NumberConstructor;
    /**
     * The number of columns on medium devices (<992px).
     */
    md: NumberConstructor;
    /**
     * The number of columns on large devices (<1200px).
     */
    lg: NumberConstructor;
    /**
     * The number of columns on X-Large devices (<1400px).
     */
    xl: NumberConstructor;
    /**
     * The number of columns on XX-Large devices (≥1400px).
     */
    xxl: NumberConstructor;
}>>, {
    as: string;
}, {}>;

import { PropType } from 'vue';
declare const CCalendar: import("vue").DefineComponent<{
    /**
     * Default date of the component
     */
    calendarDate: PropType<Date | string | null>;
    /**
     * The number of calendars that render on desktop devices.
     */
    calendars: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Set the format of day name.
     *
     * @default 'numeric'
     * @since 4.6.0
     */
    dayFormat: {
        type: (StringConstructor | FunctionConstructor)[];
        default: string;
        required: false;
        validator: (value: string) => boolean;
    };
    /**
     * Specify the list of dates that cannot be selected.
     */
    disabledDates: {
        type: PropType<Date[] | Date[][]>;
    };
    /**
     * Initial selected to date (range).
     */
    endDate: PropType<Date | string | null>;
    /**
     * Sets the day of start week.
     * - 0 - Sunday,
     * - 1 - Monday,
     * - 2 - Tuesday,
     * - 3 - Wednesday,
     * - 4 - Thursday,
     * - 5 - Friday,
     * - 6 - Saturday,
     */
    firstDayOfWeek: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Sets the default locale for components. If not set, it is inherited from the navigator.language.
     */
    locale: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Max selectable date.
     */
    maxDate: PropType<Date | string | null>;
    /**
     * Min selectable date.
     */
    minDate: PropType<Date | string | null>;
    /**
     * Show arrows navigation.
     */
    navigation: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Reorder year-month navigation, and render year first.
     *
     * @since 4.6.0
     */
    navYearFirst: BooleanConstructor;
    /**
     * Allow range selection.
     */
    range: BooleanConstructor;
    /**
     * Toggle select mode between start and end date.
     */
    selectEndDate: BooleanConstructor;
    /**
     * Set whether days in adjacent months shown before or after the current month are selectable. This only applies if the `showAdjacementDays` option is set to true.
     *
     * @since 4.9.0
     */
    selectAdjacementDays: BooleanConstructor;
    /**
     * Specify the type of date selection as day, week, month, or year.
     *
     * @since 5.0.0
     */
    selectionType: {
        type: PropType<"day" | "week" | "month" | "year">;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * Set whether to display dates in adjacent months (non-selectable) at the start and end of the current month.
     *
     * @since 4.9.0
     */
    showAdjacementDays: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Set whether to display week numbers in the calendar.
     *
     * @since 5.0.0
     */
    showWeekNumber: BooleanConstructor;
    /**
     * Initial selected date.
     */
    startDate: PropType<Date | string | null>;
    /**
     * Set length or format of day name.
     *
     * @type  number | 'long' | 'narrow' | 'short'
     */
    weekdayFormat: {
        type: (NumberConstructor | StringConstructor | FunctionConstructor)[];
        default: number;
        validator: (value: string | number) => boolean;
    };
    /**
     * Label displayed over week numbers in the calendar.
     *
     * @since 5.0.0
     */
    weekNumbersLabel: StringConstructor;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("date-hover" | "calendar-date-change" | "start-date-change" | "end-date-change")[], "date-hover" | "calendar-date-change" | "start-date-change" | "end-date-change", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Default date of the component
     */
    calendarDate: PropType<Date | string | null>;
    /**
     * The number of calendars that render on desktop devices.
     */
    calendars: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Set the format of day name.
     *
     * @default 'numeric'
     * @since 4.6.0
     */
    dayFormat: {
        type: (StringConstructor | FunctionConstructor)[];
        default: string;
        required: false;
        validator: (value: string) => boolean;
    };
    /**
     * Specify the list of dates that cannot be selected.
     */
    disabledDates: {
        type: PropType<Date[] | Date[][]>;
    };
    /**
     * Initial selected to date (range).
     */
    endDate: PropType<Date | string | null>;
    /**
     * Sets the day of start week.
     * - 0 - Sunday,
     * - 1 - Monday,
     * - 2 - Tuesday,
     * - 3 - Wednesday,
     * - 4 - Thursday,
     * - 5 - Friday,
     * - 6 - Saturday,
     */
    firstDayOfWeek: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Sets the default locale for components. If not set, it is inherited from the navigator.language.
     */
    locale: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Max selectable date.
     */
    maxDate: PropType<Date | string | null>;
    /**
     * Min selectable date.
     */
    minDate: PropType<Date | string | null>;
    /**
     * Show arrows navigation.
     */
    navigation: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Reorder year-month navigation, and render year first.
     *
     * @since 4.6.0
     */
    navYearFirst: BooleanConstructor;
    /**
     * Allow range selection.
     */
    range: BooleanConstructor;
    /**
     * Toggle select mode between start and end date.
     */
    selectEndDate: BooleanConstructor;
    /**
     * Set whether days in adjacent months shown before or after the current month are selectable. This only applies if the `showAdjacementDays` option is set to true.
     *
     * @since 4.9.0
     */
    selectAdjacementDays: BooleanConstructor;
    /**
     * Specify the type of date selection as day, week, month, or year.
     *
     * @since 5.0.0
     */
    selectionType: {
        type: PropType<"day" | "week" | "month" | "year">;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * Set whether to display dates in adjacent months (non-selectable) at the start and end of the current month.
     *
     * @since 4.9.0
     */
    showAdjacementDays: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Set whether to display week numbers in the calendar.
     *
     * @since 5.0.0
     */
    showWeekNumber: BooleanConstructor;
    /**
     * Initial selected date.
     */
    startDate: PropType<Date | string | null>;
    /**
     * Set length or format of day name.
     *
     * @type  number | 'long' | 'narrow' | 'short'
     */
    weekdayFormat: {
        type: (NumberConstructor | StringConstructor | FunctionConstructor)[];
        default: number;
        validator: (value: string | number) => boolean;
    };
    /**
     * Label displayed over week numbers in the calendar.
     *
     * @since 5.0.0
     */
    weekNumbersLabel: StringConstructor;
}>> & {
    "onDate-hover"?: ((...args: any[]) => any) | undefined;
    "onCalendar-date-change"?: ((...args: any[]) => any) | undefined;
    "onStart-date-change"?: ((...args: any[]) => any) | undefined;
    "onEnd-date-change"?: ((...args: any[]) => any) | undefined;
}, {
    calendars: number;
    dayFormat: string | Function;
    firstDayOfWeek: number;
    locale: string;
    navigation: boolean;
    navYearFirst: boolean;
    range: boolean;
    selectEndDate: boolean;
    selectAdjacementDays: boolean;
    selectionType: "day" | "week" | "month" | "year";
    showAdjacementDays: boolean;
    showWeekNumber: boolean;
    weekdayFormat: string | number | Function;
}, {}>;
export { CCalendar };

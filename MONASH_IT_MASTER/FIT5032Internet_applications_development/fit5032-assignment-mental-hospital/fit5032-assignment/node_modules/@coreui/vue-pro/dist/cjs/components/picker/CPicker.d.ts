import { PropType } from 'vue';
declare const CPicker: import("vue").DefineComponent<{
    /**
     * Set container type for the component.
     */
    container: {
        type: PropType<"dropdown" | "inline">;
        default: string;
    };
    /**
     * Toggle the disabled state for the component.
     */
    disabled: BooleanConstructor;
    /**
     * A string of all className you want applied to the dropdown menu.
     */
    dropdownClassNames: StringConstructor;
    /**
     * Toggle visibility of footer element or set the content of footer.
     */
    footer: BooleanConstructor;
    /**
     * Toggle the visibility of the component.
     */
    visible: BooleanConstructor;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("hide" | "show")[], "hide" | "show", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Set container type for the component.
     */
    container: {
        type: PropType<"dropdown" | "inline">;
        default: string;
    };
    /**
     * Toggle the disabled state for the component.
     */
    disabled: BooleanConstructor;
    /**
     * A string of all className you want applied to the dropdown menu.
     */
    dropdownClassNames: StringConstructor;
    /**
     * Toggle visibility of footer element or set the content of footer.
     */
    footer: BooleanConstructor;
    /**
     * Toggle the visibility of the component.
     */
    visible: BooleanConstructor;
}>> & {
    onHide?: ((...args: any[]) => any) | undefined;
    onShow?: ((...args: any[]) => any) | undefined;
}, {
    footer: boolean;
    visible: boolean;
    disabled: boolean;
    container: "dropdown" | "inline";
}, {}>;
export { CPicker };

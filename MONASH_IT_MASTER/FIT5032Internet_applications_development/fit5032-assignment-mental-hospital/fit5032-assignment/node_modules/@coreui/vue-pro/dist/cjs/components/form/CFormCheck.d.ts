declare const CFormCheck: import("vue").DefineComponent<{
    /**
     * Create button-like checkboxes and radio buttons.
     *
     * @see http://coreui.io/vue/docs/components/button.html
     */
    button: ObjectConstructor;
    /**
     * Use in conjunction with the v-model directive to specify the value that should be assigned to the bound variable when the checkbox is in the `false` state.
     *
     * @since 4.10.0
     */
    falseValue: StringConstructor;
    /**
     * Provide valuable, actionable feedback.
     *
     * @since 4.3.0
     */
    feedback: StringConstructor;
    /**
     * Provide valuable, actionable feedback.
     *
     * @since 4.3.0
     */
    feedbackInvalid: StringConstructor;
    /**
     * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.
     *
     * @since 4.3.0
     */
    feedbackValid: StringConstructor;
    /**
     * Sets hit area to the full area of the component.
     */
    hitArea: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * The id global attribute defines an identifier (ID) that must be unique in the whole document.
     */
    id: StringConstructor;
    /**
     * Input Checkbox indeterminate Property
     */
    indeterminate: BooleanConstructor;
    /**
     * Group checkboxes or radios on the same horizontal row by adding.
     */
    inline: BooleanConstructor;
    /**
     * Set component validation state to invalid.
     */
    invalid: BooleanConstructor;
    /**
     * The element represents a caption for a component.
     */
    label: StringConstructor;
    /**
     * The default name for a value passed using v-model.
     */
    modelValue: {
        type: (StringConstructor | BooleanConstructor | ArrayConstructor)[];
        value: undefined;
    };
    /**
     * Put checkboxes or radios on the opposite side.
     *
     * @since 4.8.0
     */
    reverse: BooleanConstructor;
    /**
     * Display validation feedback in a styled tooltip.
     *
     * @since 4.3.0
     */
    tooltipFeedback: BooleanConstructor;
    /**
     * Use in conjunction with the v-model directive to specify the value that should be assigned to the bound variable when the checkbox is in the `true` state.
     *
     * @since 4.10.0
     */
    trueValue: StringConstructor;
    /**
     * Specifies the type of component.
     *
     * @values 'checkbox', 'radio'
     */
    type: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Set component validation state to valid.
     */
    valid: BooleanConstructor;
    /**
     * The value attribute of component.
     */
    value: StringConstructor;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> | ("" | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> | undefined)[], unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Create button-like checkboxes and radio buttons.
     *
     * @see http://coreui.io/vue/docs/components/button.html
     */
    button: ObjectConstructor;
    /**
     * Use in conjunction with the v-model directive to specify the value that should be assigned to the bound variable when the checkbox is in the `false` state.
     *
     * @since 4.10.0
     */
    falseValue: StringConstructor;
    /**
     * Provide valuable, actionable feedback.
     *
     * @since 4.3.0
     */
    feedback: StringConstructor;
    /**
     * Provide valuable, actionable feedback.
     *
     * @since 4.3.0
     */
    feedbackInvalid: StringConstructor;
    /**
     * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.
     *
     * @since 4.3.0
     */
    feedbackValid: StringConstructor;
    /**
     * Sets hit area to the full area of the component.
     */
    hitArea: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * The id global attribute defines an identifier (ID) that must be unique in the whole document.
     */
    id: StringConstructor;
    /**
     * Input Checkbox indeterminate Property
     */
    indeterminate: BooleanConstructor;
    /**
     * Group checkboxes or radios on the same horizontal row by adding.
     */
    inline: BooleanConstructor;
    /**
     * Set component validation state to invalid.
     */
    invalid: BooleanConstructor;
    /**
     * The element represents a caption for a component.
     */
    label: StringConstructor;
    /**
     * The default name for a value passed using v-model.
     */
    modelValue: {
        type: (StringConstructor | BooleanConstructor | ArrayConstructor)[];
        value: undefined;
    };
    /**
     * Put checkboxes or radios on the opposite side.
     *
     * @since 4.8.0
     */
    reverse: BooleanConstructor;
    /**
     * Display validation feedback in a styled tooltip.
     *
     * @since 4.3.0
     */
    tooltipFeedback: BooleanConstructor;
    /**
     * Use in conjunction with the v-model directive to specify the value that should be assigned to the bound variable when the checkbox is in the `true` state.
     *
     * @since 4.10.0
     */
    trueValue: StringConstructor;
    /**
     * Specifies the type of component.
     *
     * @values 'checkbox', 'radio'
     */
    type: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Set component validation state to valid.
     */
    valid: BooleanConstructor;
    /**
     * The value attribute of component.
     */
    value: StringConstructor;
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    reverse: boolean;
    invalid: boolean;
    type: string;
    valid: boolean;
    tooltipFeedback: boolean;
    inline: boolean;
    indeterminate: boolean;
}, {}>;
export { CFormCheck };

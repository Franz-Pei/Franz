import { PropType, VNode } from 'vue';
import type { Option } from './types';
declare const CMultiSelectNativeSelect: import("vue").DefineComponent<{
    id: StringConstructor;
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: StringConstructor;
    options: {
        type: PropType<Option[]>;
        default: () => never[];
    };
    required: BooleanConstructor;
    value: (NumberConstructor | StringConstructor | ArrayConstructor)[];
}, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "change"[], "change", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    id: StringConstructor;
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: StringConstructor;
    options: {
        type: PropType<Option[]>;
        default: () => never[];
    };
    required: BooleanConstructor;
    value: (NumberConstructor | StringConstructor | ArrayConstructor)[];
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    required: boolean;
    options: Option[];
    multiple: boolean;
}, {}>;
export { CMultiSelectNativeSelect };

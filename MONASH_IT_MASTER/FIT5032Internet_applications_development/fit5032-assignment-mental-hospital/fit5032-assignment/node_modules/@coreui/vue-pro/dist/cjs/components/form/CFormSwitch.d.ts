declare const CFormSwitch: import("vue").DefineComponent<{
    /**
     * The id global attribute defines an identifier (ID) that must be unique in the whole document
     */
    id: StringConstructor;
    /**
     * Set component validation state to invalid.
     */
    invalid: BooleanConstructor;
    /**
     * The element represents a caption for a component.
     */
    label: StringConstructor;
    /**
     * The default name for a value passed using v-model.
     */
    modelValue: (StringConstructor | BooleanConstructor)[];
    /**
     * Put checkboxes or radios on the opposite side.
     *
     * @since 4.8.0
     */
    reverse: BooleanConstructor;
    /**
     * Size the component large or extra large. Works only with `switch`.
     *
     * @values 'lg' | 'xl'
     */
    size: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Specifies the type of component.
     *
     * @values 'checkbox', 'radio'
     */
    type: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Set component validation state to valid.
     */
    valid: BooleanConstructor;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * The id global attribute defines an identifier (ID) that must be unique in the whole document
     */
    id: StringConstructor;
    /**
     * Set component validation state to invalid.
     */
    invalid: BooleanConstructor;
    /**
     * The element represents a caption for a component.
     */
    label: StringConstructor;
    /**
     * The default name for a value passed using v-model.
     */
    modelValue: (StringConstructor | BooleanConstructor)[];
    /**
     * Put checkboxes or radios on the opposite side.
     *
     * @since 4.8.0
     */
    reverse: BooleanConstructor;
    /**
     * Size the component large or extra large. Works only with `switch`.
     *
     * @values 'lg' | 'xl'
     */
    size: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Specifies the type of component.
     *
     * @values 'checkbox', 'radio'
     */
    type: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Set component validation state to valid.
     */
    valid: BooleanConstructor;
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    reverse: boolean;
    invalid: boolean;
    type: string;
    valid: boolean;
}, {}>;
export { CFormSwitch };

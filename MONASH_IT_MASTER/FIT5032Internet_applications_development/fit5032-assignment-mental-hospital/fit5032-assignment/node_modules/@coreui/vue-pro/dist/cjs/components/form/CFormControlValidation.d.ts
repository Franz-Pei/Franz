declare const CFormControlValidation: import("vue").DefineComponent<{
    /**
     * @ignore
     */
    describedby: StringConstructor;
    /**
     * Provide valuable, actionable feedback.
     *
     * @since 4.3.0
     */
    feedback: StringConstructor;
    /**
     * Provide valuable, actionable feedback.
     *
     * @since 4.3.0
     */
    feedbackInvalid: StringConstructor;
    /**
     * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.
     *
     * @since 4.3.0
     */
    feedbackValid: StringConstructor;
    /**
     * Set component validation state to invalid.
     */
    invalid: BooleanConstructor;
    /**
     * Display validation feedback in a styled tooltip.
     *
     * @since 4.3.0
     */
    tooltipFeedback: BooleanConstructor;
    /**
     * Set component validation state to valid.
     */
    valid: BooleanConstructor;
}, () => (false | "" | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> | undefined)[], unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * @ignore
     */
    describedby: StringConstructor;
    /**
     * Provide valuable, actionable feedback.
     *
     * @since 4.3.0
     */
    feedback: StringConstructor;
    /**
     * Provide valuable, actionable feedback.
     *
     * @since 4.3.0
     */
    feedbackInvalid: StringConstructor;
    /**
     * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.
     *
     * @since 4.3.0
     */
    feedbackValid: StringConstructor;
    /**
     * Set component validation state to invalid.
     */
    invalid: BooleanConstructor;
    /**
     * Display validation feedback in a styled tooltip.
     *
     * @since 4.3.0
     */
    tooltipFeedback: BooleanConstructor;
    /**
     * Set component validation state to valid.
     */
    valid: BooleanConstructor;
}>>, {
    invalid: boolean;
    valid: boolean;
    tooltipFeedback: boolean;
}, {}>;
export { CFormControlValidation };

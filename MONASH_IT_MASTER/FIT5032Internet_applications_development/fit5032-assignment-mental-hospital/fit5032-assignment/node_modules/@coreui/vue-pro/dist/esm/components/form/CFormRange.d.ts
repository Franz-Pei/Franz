declare const CFormRange: import("vue").DefineComponent<{
    /**
     * Toggle the disabled state for the component.
     */
    disabled: BooleanConstructor;
    /**
     * Add a caption for a component.
     *
     * @since 4.3.0
     */
    label: StringConstructor;
    /**
     * Specifies the maximum value for the component.
     */
    max: NumberConstructor;
    /**
     * Specifies the minimum value for the component.
     */
    min: NumberConstructor;
    /**
     * The default name for a value passed using v-model.
     */
    modelValue: StringConstructor;
    /**
     * Toggle the readonly state for the component.
     */
    readonly: BooleanConstructor;
    /**
     * Specifies the interval between legal numbers in the component.
     */
    steps: NumberConstructor;
    /**
     * The `value` attribute of component.
     *
     * @controllable onChange
     * */
    value: NumberConstructor;
}, () => ("" | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> | undefined)[], unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Toggle the disabled state for the component.
     */
    disabled: BooleanConstructor;
    /**
     * Add a caption for a component.
     *
     * @since 4.3.0
     */
    label: StringConstructor;
    /**
     * Specifies the maximum value for the component.
     */
    max: NumberConstructor;
    /**
     * Specifies the minimum value for the component.
     */
    min: NumberConstructor;
    /**
     * The default name for a value passed using v-model.
     */
    modelValue: StringConstructor;
    /**
     * Toggle the readonly state for the component.
     */
    readonly: BooleanConstructor;
    /**
     * Specifies the interval between legal numbers in the component.
     */
    steps: NumberConstructor;
    /**
     * The `value` attribute of component.
     *
     * @controllable onChange
     * */
    value: NumberConstructor;
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    readonly: boolean;
}, {}>;
export { CFormRange };

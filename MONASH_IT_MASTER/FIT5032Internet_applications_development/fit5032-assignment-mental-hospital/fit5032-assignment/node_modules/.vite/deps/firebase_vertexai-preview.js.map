{
  "version": 3,
  "sources": ["../../@firebase/vertexai-preview/src/constants.ts", "../../@firebase/vertexai-preview/src/service.ts", "../../@firebase/vertexai-preview/src/errors.ts", "../../@firebase/vertexai-preview/src/requests/request.ts", "../../@firebase/vertexai-preview/src/types/enums.ts", "../../@firebase/vertexai-preview/src/types/requests.ts", "../../@firebase/vertexai-preview/src/requests/response-helpers.ts", "../../@firebase/vertexai-preview/src/requests/stream-reader.ts", "../../@firebase/vertexai-preview/src/methods/generate-content.ts", "../../@firebase/vertexai-preview/src/requests/request-helpers.ts", "../../@firebase/vertexai-preview/src/methods/chat-session-helpers.ts", "../../@firebase/vertexai-preview/src/methods/chat-session.ts", "../../@firebase/vertexai-preview/src/methods/count-tokens.ts", "../../@firebase/vertexai-preview/src/models/generative-model.ts", "../../@firebase/vertexai-preview/src/api.ts", "../../@firebase/vertexai-preview/src/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const VERTEX_TYPE = 'vertexAI';\n\nexport const DEFAULT_LOCATION = 'us-central1';\n\nexport const DEFAULT_BASE_URL = 'https://firebaseml.googleapis.com';\n\nexport const DEFAULT_API_VERSION = 'v2beta';\n\nexport const PACKAGE_VERSION = version;\n\nexport const LANGUAGE_TAG = 'gl-js';\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { VertexAI, VertexAIOptions } from './public-types';\nimport {\n  AppCheckInternalComponentName,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { DEFAULT_LOCATION } from './constants';\n\nexport class VertexAIService implements VertexAI, _FirebaseService {\n  auth: FirebaseAuthInternal | null;\n  appCheck: FirebaseAppCheckInternal | null;\n  location: string;\n\n  constructor(\n    public app: FirebaseApp,\n    authProvider?: Provider<FirebaseAuthInternalName>,\n    appCheckProvider?: Provider<AppCheckInternalComponentName>,\n    public options?: VertexAIOptions\n  ) {\n    const appCheck = appCheckProvider?.getImmediate({ optional: true });\n    const auth = authProvider?.getImmediate({ optional: true });\n    this.auth = auth || null;\n    this.appCheck = appCheck || null;\n    this.location = this.options?.location || DEFAULT_LOCATION;\n  }\n\n  _delete(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { VertexAIErrorCode, CustomErrorData } from './types';\nimport { VERTEX_TYPE } from './constants';\n\n/**\n * Error class for the Vertex AI in Firebase SDK.\n *\n * @public\n */\nexport class VertexAIError extends FirebaseError {\n  /**\n   * Constructs a new instance of the `VertexAIError` class.\n   *\n   * @param code - The error code from {@link VertexAIErrorCode}.\n   * @param message - A human-readable message describing the error.\n   * @param customErrorData - Optional error data.\n   */\n  constructor(\n    readonly code: VertexAIErrorCode,\n    readonly message: string,\n    readonly customErrorData?: CustomErrorData\n  ) {\n    // Match error format used by FirebaseError from ErrorFactory\n    const service = VERTEX_TYPE;\n    const serviceName = 'VertexAI';\n    const fullCode = `${service}/${code}`;\n    const fullMessage = `${serviceName}: ${message} (${fullCode}).`;\n    super(fullCode, fullMessage);\n\n    // FirebaseError initializes a stack trace, but it assumes the error is created from the error\n    // factory. Since we break this assumption, we set the stack trace to be originating from this\n    // constructor.\n    // This is only supported in V8.\n    if (Error.captureStackTrace) {\n      // Allows us to initialize the stack trace without including the constructor itself at the\n      // top level of the stack trace.\n      Error.captureStackTrace(this, VertexAIError);\n    }\n\n    // Allows instanceof VertexAIError in ES5/ES6\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, VertexAIError.prototype);\n\n    // Since Error is an interface, we don't inherit toString and so we define it ourselves.\n    this.toString = () => fullMessage;\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RequestOptions, VertexAIErrorCode } from '../types';\nimport { VertexAIError } from '../errors';\nimport { ApiSettings } from '../types/internal';\nimport {\n  DEFAULT_API_VERSION,\n  DEFAULT_BASE_URL,\n  LANGUAGE_TAG,\n  PACKAGE_VERSION\n} from '../constants';\n\nexport enum Task {\n  GENERATE_CONTENT = 'generateContent',\n  STREAM_GENERATE_CONTENT = 'streamGenerateContent',\n  COUNT_TOKENS = 'countTokens'\n}\n\nexport class RequestUrl {\n  constructor(\n    public model: string,\n    public task: Task,\n    public apiSettings: ApiSettings,\n    public stream: boolean,\n    public requestOptions?: RequestOptions\n  ) {}\n  toString(): string {\n    // TODO: allow user-set option if that feature becomes available\n    const apiVersion = DEFAULT_API_VERSION;\n    const baseUrl = this.requestOptions?.baseUrl || DEFAULT_BASE_URL;\n    let url = `${baseUrl}/${apiVersion}`;\n    url += `/projects/${this.apiSettings.project}`;\n    url += `/locations/${this.apiSettings.location}`;\n    url += `/${this.model}`;\n    url += `:${this.task}`;\n    if (this.stream) {\n      url += '?alt=sse';\n    }\n    return url;\n  }\n\n  /**\n   * If the model needs to be passed to the backend, it needs to\n   * include project and location path.\n   */\n  get fullModelString(): string {\n    let modelString = `projects/${this.apiSettings.project}`;\n    modelString += `/locations/${this.apiSettings.location}`;\n    modelString += `/${this.model}`;\n    return modelString;\n  }\n}\n\n/**\n * Log language and \"fire/version\" to x-goog-api-client\n */\nfunction getClientHeaders(): string {\n  const loggingTags = [];\n  loggingTags.push(`${LANGUAGE_TAG}/${PACKAGE_VERSION}`);\n  loggingTags.push(`fire/${PACKAGE_VERSION}`);\n  return loggingTags.join(' ');\n}\n\nexport async function getHeaders(url: RequestUrl): Promise<Headers> {\n  const headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n  headers.append('x-goog-api-client', getClientHeaders());\n  headers.append('x-goog-api-key', url.apiSettings.apiKey);\n  if (url.apiSettings.getAppCheckToken) {\n    const appCheckToken = await url.apiSettings.getAppCheckToken();\n    if (appCheckToken && !appCheckToken.error) {\n      headers.append('X-Firebase-AppCheck', appCheckToken.token);\n    }\n  }\n\n  if (url.apiSettings.getAuthToken) {\n    const authToken = await url.apiSettings.getAuthToken();\n    if (authToken) {\n      headers.append('Authorization', `Firebase ${authToken.accessToken}`);\n    }\n  }\n\n  return headers;\n}\n\nexport async function constructRequest(\n  model: string,\n  task: Task,\n  apiSettings: ApiSettings,\n  stream: boolean,\n  body: string,\n  requestOptions?: RequestOptions\n): Promise<{ url: string; fetchOptions: RequestInit }> {\n  const url = new RequestUrl(model, task, apiSettings, stream, requestOptions);\n  return {\n    url: url.toString(),\n    fetchOptions: {\n      ...buildFetchOptions(requestOptions),\n      method: 'POST',\n      headers: await getHeaders(url),\n      body\n    }\n  };\n}\n\nexport async function makeRequest(\n  model: string,\n  task: Task,\n  apiSettings: ApiSettings,\n  stream: boolean,\n  body: string,\n  requestOptions?: RequestOptions\n): Promise<Response> {\n  const url = new RequestUrl(model, task, apiSettings, stream, requestOptions);\n  let response;\n  try {\n    const request = await constructRequest(\n      model,\n      task,\n      apiSettings,\n      stream,\n      body,\n      requestOptions\n    );\n    response = await fetch(request.url, request.fetchOptions);\n    if (!response.ok) {\n      let message = '';\n      let errorDetails;\n      try {\n        const json = await response.json();\n        message = json.error.message;\n        if (json.error.details) {\n          message += ` ${JSON.stringify(json.error.details)}`;\n          errorDetails = json.error.details;\n        }\n      } catch (e) {\n        // ignored\n      }\n      throw new VertexAIError(\n        VertexAIErrorCode.FETCH_ERROR,\n        `Error fetching from ${url}: [${response.status} ${response.statusText}] ${message}`,\n        {\n          status: response.status,\n          statusText: response.statusText,\n          errorDetails\n        }\n      );\n    }\n  } catch (e) {\n    let err = e as Error;\n    if (\n      (e as VertexAIError).code !== VertexAIErrorCode.FETCH_ERROR &&\n      e instanceof Error\n    ) {\n      err = new VertexAIError(\n        VertexAIErrorCode.ERROR,\n        `Error fetching from ${url.toString()}: ${e.message}`\n      );\n      err.stack = e.stack;\n    }\n\n    throw err;\n  }\n  return response;\n}\n\n/**\n * Generates the request options to be passed to the fetch API.\n * @param requestOptions - The user-defined request options.\n * @returns The generated request options.\n */\nfunction buildFetchOptions(requestOptions?: RequestOptions): RequestInit {\n  const fetchOptions = {} as RequestInit;\n  if (requestOptions?.timeout && requestOptions?.timeout >= 0) {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    setTimeout(() => abortController.abort(), requestOptions.timeout);\n    fetchOptions.signal = signal;\n  }\n  return fetchOptions;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Role is the producer of the content.\n * @public\n */\nexport type Role = (typeof POSSIBLE_ROLES)[number];\n\n/**\n * Possible roles.\n * @public\n */\nexport const POSSIBLE_ROLES = ['user', 'model', 'function', 'system'] as const;\n\n/**\n * Harm categories that would cause prompts or candidates to be blocked.\n * @public\n */\nexport enum HarmCategory {\n  HARM_CATEGORY_UNSPECIFIED = 'HARM_CATEGORY_UNSPECIFIED',\n  HARM_CATEGORY_HATE_SPEECH = 'HARM_CATEGORY_HATE_SPEECH',\n  HARM_CATEGORY_SEXUALLY_EXPLICIT = 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n  HARM_CATEGORY_HARASSMENT = 'HARM_CATEGORY_HARASSMENT',\n  HARM_CATEGORY_DANGEROUS_CONTENT = 'HARM_CATEGORY_DANGEROUS_CONTENT'\n}\n\n/**\n * Threshold above which a prompt or candidate will be blocked.\n * @public\n */\nexport enum HarmBlockThreshold {\n  // Threshold is unspecified.\n  HARM_BLOCK_THRESHOLD_UNSPECIFIED = 'HARM_BLOCK_THRESHOLD_UNSPECIFIED',\n  // Content with NEGLIGIBLE will be allowed.\n  BLOCK_LOW_AND_ABOVE = 'BLOCK_LOW_AND_ABOVE',\n  // Content with NEGLIGIBLE and LOW will be allowed.\n  BLOCK_MEDIUM_AND_ABOVE = 'BLOCK_MEDIUM_AND_ABOVE',\n  // Content with NEGLIGIBLE, LOW, and MEDIUM will be allowed.\n  BLOCK_ONLY_HIGH = 'BLOCK_ONLY_HIGH',\n  // All content will be allowed.\n  BLOCK_NONE = 'BLOCK_NONE'\n}\n\n/**\n * @public\n */\nexport enum HarmBlockMethod {\n  // The harm block method is unspecified.\n  HARM_BLOCK_METHOD_UNSPECIFIED = 'HARM_BLOCK_METHOD_UNSPECIFIED',\n  // The harm block method uses both probability and severity scores.\n  SEVERITY = 'SEVERITY',\n  // The harm block method uses the probability score.\n  PROBABILITY = 'PROBABILITY'\n}\n\n/**\n * Probability that a prompt or candidate matches a harm category.\n * @public\n */\nexport enum HarmProbability {\n  // Probability is unspecified.\n  HARM_PROBABILITY_UNSPECIFIED = 'HARM_PROBABILITY_UNSPECIFIED',\n  // Content has a negligible chance of being unsafe.\n  NEGLIGIBLE = 'NEGLIGIBLE',\n  // Content has a low chance of being unsafe.\n  LOW = 'LOW',\n  // Content has a medium chance of being unsafe.\n  MEDIUM = 'MEDIUM',\n  // Content has a high chance of being unsafe.\n  HIGH = 'HIGH'\n}\n\n/**\n * Harm severity levels.\n * @public\n */\nexport enum HarmSeverity {\n  // Harm severity unspecified.\n  HARM_SEVERITY_UNSPECIFIED = 'HARM_SEVERITY_UNSPECIFIED',\n  // Negligible level of harm severity.\n  HARM_SEVERITY_NEGLIGIBLE = 'HARM_SEVERITY_NEGLIGIBLE',\n  // Low level of harm severity.\n  HARM_SEVERITY_LOW = 'HARM_SEVERITY_LOW',\n  // Medium level of harm severity.\n  HARM_SEVERITY_MEDIUM = 'HARM_SEVERITY_MEDIUM',\n  // High level of harm severity.\n  HARM_SEVERITY_HIGH = 'HARM_SEVERITY_HIGH'\n}\n\n/**\n * Reason that a prompt was blocked.\n * @public\n */\nexport enum BlockReason {\n  // A blocked reason was not specified.\n  BLOCKED_REASON_UNSPECIFIED = 'BLOCKED_REASON_UNSPECIFIED',\n  // Content was blocked by safety settings.\n  SAFETY = 'SAFETY',\n  // Content was blocked, but the reason is uncategorized.\n  OTHER = 'OTHER'\n}\n\n/**\n * Reason that a candidate finished.\n * @public\n */\nexport enum FinishReason {\n  // Default value. This value is unused.\n  FINISH_REASON_UNSPECIFIED = 'FINISH_REASON_UNSPECIFIED',\n  // Natural stop point of the model or provided stop sequence.\n  STOP = 'STOP',\n  // The maximum number of tokens as specified in the request was reached.\n  MAX_TOKENS = 'MAX_TOKENS',\n  // The candidate content was flagged for safety reasons.\n  SAFETY = 'SAFETY',\n  // The candidate content was flagged for recitation reasons.\n  RECITATION = 'RECITATION',\n  // Unknown reason.\n  OTHER = 'OTHER'\n}\n\n/**\n * @public\n */\nexport enum FunctionCallingMode {\n  // Unspecified function calling mode. This value should not be used.\n  MODE_UNSPECIFIED = 'MODE_UNSPECIFIED',\n  // Default model behavior, model decides to predict either a function call\n  // or a natural language response.\n  AUTO = 'AUTO',\n  // Model is constrained to always predicting a function call only.\n  // If \"allowed_function_names\" is set, the predicted function call will be\n  // limited to any one of \"allowed_function_names\", else the predicted\n  // function call will be any one of the provided \"function_declarations\".\n  ANY = 'ANY',\n  // Model will not predict any function call. Model behavior is same as when\n  // not passing any function declarations.\n  NONE = 'NONE'\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Content, Part } from './content';\nimport {\n  FunctionCallingMode,\n  HarmBlockMethod,\n  HarmBlockThreshold,\n  HarmCategory\n} from './enums';\n\n/**\n * Base parameters for a number of methods.\n * @public\n */\nexport interface BaseParams {\n  safetySettings?: SafetySetting[];\n  generationConfig?: GenerationConfig;\n}\n\n/**\n * Params passed to {@link getGenerativeModel}.\n * @public\n */\nexport interface ModelParams extends BaseParams {\n  model: string;\n  tools?: Tool[];\n  toolConfig?: ToolConfig;\n  systemInstruction?: string | Part | Content;\n}\n\n/**\n * Request sent through {@link GenerativeModel.generateContent}\n * @public\n */\nexport interface GenerateContentRequest extends BaseParams {\n  contents: Content[];\n  tools?: Tool[];\n  toolConfig?: ToolConfig;\n  systemInstruction?: string | Part | Content;\n}\n\n/**\n * Safety setting that can be sent as part of request parameters.\n * @public\n */\nexport interface SafetySetting {\n  category: HarmCategory;\n  threshold: HarmBlockThreshold;\n  method: HarmBlockMethod;\n}\n\n/**\n * Config options for content-related requests\n * @public\n */\nexport interface GenerationConfig {\n  candidateCount?: number;\n  stopSequences?: string[];\n  maxOutputTokens?: number;\n  temperature?: number;\n  topP?: number;\n  topK?: number;\n  presencePenalty?: number;\n  frequencyPenalty?: number;\n  /**\n   * Output response mimetype of the generated candidate text.\n   * Supported mimetypes are `text/plain` (default, text output) and `application/json`\n   * (JSON response in the candidates).\n   * The model needs to be prompted to output the appropriate response type,\n   * otherwise the behavior is undefined.\n   * This is a preview feature.\n   */\n  responseMimeType?: string;\n}\n\n/**\n * Params for {@link GenerativeModel.startChat}.\n * @public\n */\nexport interface StartChatParams extends BaseParams {\n  history?: Content[];\n  tools?: Tool[];\n  toolConfig?: ToolConfig;\n  systemInstruction?: string | Part | Content;\n}\n\n/**\n * Params for calling {@link GenerativeModel.countTokens}\n * @public\n */\nexport interface CountTokensRequest {\n  contents: Content[];\n}\n\n/**\n * Params passed to {@link getGenerativeModel}.\n * @public\n */\nexport interface RequestOptions {\n  /**\n   * Request timeout in milliseconds.\n   */\n  timeout?: number;\n  /**\n   * Base url for endpoint. Defaults to https://firebaseml.googleapis.com\n   */\n  baseUrl?: string;\n}\n\n/**\n * Defines a tool that model can call to access external knowledge.\n * @public\n */\nexport declare type Tool = FunctionDeclarationsTool;\n\n/**\n * Structured representation of a function declaration as defined by the\n * {@link https://spec.openapis.org/oas/v3.0.3 | OpenAPI 3.0 specification}.\n * Included\n * in this declaration are the function name and parameters. This\n * `FunctionDeclaration` is a representation of a block of code that can be used\n * as a Tool by the model and executed by the client.\n * @public\n */\nexport declare interface FunctionDeclaration {\n  /**\n   * The name of the function to call. Must start with a letter or an\n   * underscore. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with\n   * a max length of 64.\n   */\n  name: string;\n  /**\n   * Optional. Description and purpose of the function. Model uses it to decide\n   * how and whether to call the function.\n   */\n  description?: string;\n  /**\n   * Optional. Describes the parameters to this function in JSON Schema Object\n   * format. Reflects the Open API 3.03 Parameter Object. Parameter names are\n   * case-sensitive. For a function with no parameters, this can be left unset.\n   */\n  parameters?: FunctionDeclarationSchema;\n}\n\n/**\n * A `FunctionDeclarationsTool` is a piece of code that enables the system to\n * interact with external systems to perform an action, or set of actions,\n * outside of knowledge and scope of the model.\n * @public\n */\nexport declare interface FunctionDeclarationsTool {\n  /**\n   * Optional. One or more function declarations\n   * to be passed to the model along with the current user query. Model may\n   * decide to call a subset of these functions by populating\n   * {@link FunctionCall} in the response. User should\n   * provide a {@link FunctionResponse} for each\n   * function call in the next turn. Based on the function responses, the model will\n   * generate the final response back to the user. Maximum 64 function\n   * declarations can be provided.\n   */\n  functionDeclarations?: FunctionDeclaration[];\n}\n\n/**\n * Contains the list of OpenAPI data types\n * as defined by https://swagger.io/docs/specification/data-models/data-types/\n * @public\n */\nexport enum FunctionDeclarationSchemaType {\n  /** String type. */\n  STRING = 'STRING',\n  /** Number type. */\n  NUMBER = 'NUMBER',\n  /** Integer type. */\n  INTEGER = 'INTEGER',\n  /** Boolean type. */\n  BOOLEAN = 'BOOLEAN',\n  /** Array type. */\n  ARRAY = 'ARRAY',\n  /** Object type. */\n  OBJECT = 'OBJECT'\n}\n\n/**\n * Schema for parameters passed to {@link FunctionDeclaration.parameters}.\n * @public\n */\nexport interface FunctionDeclarationSchema {\n  /** The type of the parameter. */\n  type: FunctionDeclarationSchemaType;\n  /** The format of the parameter. */\n  properties: { [k: string]: FunctionDeclarationSchemaProperty };\n  /** Optional. Description of the parameter. */\n  description?: string;\n  /** Optional. Array of required parameters. */\n  required?: string[];\n}\n\n/**\n * Schema is used to define the format of input/output data.\n * Represents a select subset of an OpenAPI 3.0 schema object.\n * More fields may be added in the future as needed.\n * @public\n */\nexport interface FunctionDeclarationSchemaProperty {\n  /**\n   * Optional. The type of the property. {@link\n   * FunctionDeclarationSchemaType}.\n   */\n  type?: FunctionDeclarationSchemaType;\n  /** Optional. The format of the property. */\n  format?: string;\n  /** Optional. The description of the property. */\n  description?: string;\n  /** Optional. Whether the property is nullable. */\n  nullable?: boolean;\n  /** Optional. The items of the property. {@link FunctionDeclarationSchema} */\n  items?: FunctionDeclarationSchema;\n  /** Optional. The enum of the property. */\n  enum?: string[];\n  /** Optional. Map of {@link FunctionDeclarationSchema}. */\n  properties?: { [k: string]: FunctionDeclarationSchema };\n  /** Optional. Array of required property. */\n  required?: string[];\n  /** Optional. The example of the property. */\n  example?: unknown;\n}\n\n/**\n * Tool config. This config is shared for all tools provided in the request.\n * @public\n */\nexport interface ToolConfig {\n  functionCallingConfig: FunctionCallingConfig;\n}\n\n/**\n * @public\n */\nexport interface FunctionCallingConfig {\n  mode?: FunctionCallingMode;\n  allowedFunctionNames?: string[];\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  EnhancedGenerateContentResponse,\n  FinishReason,\n  FunctionCall,\n  GenerateContentCandidate,\n  GenerateContentResponse,\n  VertexAIErrorCode\n} from '../types';\nimport { VertexAIError } from '../errors';\n\n/**\n * Adds convenience helper methods to a response object, including stream\n * chunks (as long as each chunk is a complete GenerateContentResponse JSON).\n */\nexport function addHelpers(\n  response: GenerateContentResponse\n): EnhancedGenerateContentResponse {\n  (response as EnhancedGenerateContentResponse).text = () => {\n    if (response.candidates && response.candidates.length > 0) {\n      if (response.candidates.length > 1) {\n        console.warn(\n          `This response had ${response.candidates.length} ` +\n            `candidates. Returning text from the first candidate only. ` +\n            `Access response.candidates directly to use the other candidates.`\n        );\n      }\n      if (hadBadFinishReason(response.candidates[0])) {\n        throw new VertexAIError(\n          VertexAIErrorCode.RESPONSE_ERROR,\n          `Response error: ${formatBlockErrorMessage(\n            response\n          )}. Response body stored in error.response`,\n          {\n            response\n          }\n        );\n      }\n      return getText(response);\n    } else if (response.promptFeedback) {\n      throw new VertexAIError(\n        VertexAIErrorCode.RESPONSE_ERROR,\n        `Text not available. ${formatBlockErrorMessage(response)}`,\n        {\n          response\n        }\n      );\n    }\n    return '';\n  };\n  (response as EnhancedGenerateContentResponse).functionCalls = () => {\n    if (response.candidates && response.candidates.length > 0) {\n      if (response.candidates.length > 1) {\n        console.warn(\n          `This response had ${response.candidates.length} ` +\n            `candidates. Returning function calls from the first candidate only. ` +\n            `Access response.candidates directly to use the other candidates.`\n        );\n      }\n      if (hadBadFinishReason(response.candidates[0])) {\n        throw new VertexAIError(\n          VertexAIErrorCode.RESPONSE_ERROR,\n          `Response error: ${formatBlockErrorMessage(\n            response\n          )}. Response body stored in error.response`,\n          {\n            response\n          }\n        );\n      }\n      return getFunctionCalls(response);\n    } else if (response.promptFeedback) {\n      throw new VertexAIError(\n        VertexAIErrorCode.RESPONSE_ERROR,\n        `Function call not available. ${formatBlockErrorMessage(response)}`,\n        {\n          response\n        }\n      );\n    }\n    return undefined;\n  };\n  return response as EnhancedGenerateContentResponse;\n}\n\n/**\n * Returns all text found in all parts of first candidate.\n */\nexport function getText(response: GenerateContentResponse): string {\n  const textStrings = [];\n  if (response.candidates?.[0].content?.parts) {\n    for (const part of response.candidates?.[0].content?.parts) {\n      if (part.text) {\n        textStrings.push(part.text);\n      }\n    }\n  }\n  if (textStrings.length > 0) {\n    return textStrings.join('');\n  } else {\n    return '';\n  }\n}\n\n/**\n * Returns {@link FunctionCall}s associated with first candidate.\n */\nexport function getFunctionCalls(\n  response: GenerateContentResponse\n): FunctionCall[] | undefined {\n  const functionCalls: FunctionCall[] = [];\n  if (response.candidates?.[0].content?.parts) {\n    for (const part of response.candidates?.[0].content?.parts) {\n      if (part.functionCall) {\n        functionCalls.push(part.functionCall);\n      }\n    }\n  }\n  if (functionCalls.length > 0) {\n    return functionCalls;\n  } else {\n    return undefined;\n  }\n}\n\nconst badFinishReasons = [FinishReason.RECITATION, FinishReason.SAFETY];\n\nfunction hadBadFinishReason(candidate: GenerateContentCandidate): boolean {\n  return (\n    !!candidate.finishReason &&\n    badFinishReasons.includes(candidate.finishReason)\n  );\n}\n\nexport function formatBlockErrorMessage(\n  response: GenerateContentResponse\n): string {\n  let message = '';\n  if (\n    (!response.candidates || response.candidates.length === 0) &&\n    response.promptFeedback\n  ) {\n    message += 'Response was blocked';\n    if (response.promptFeedback?.blockReason) {\n      message += ` due to ${response.promptFeedback.blockReason}`;\n    }\n    if (response.promptFeedback?.blockReasonMessage) {\n      message += `: ${response.promptFeedback.blockReasonMessage}`;\n    }\n  } else if (response.candidates?.[0]) {\n    const firstCandidate = response.candidates[0];\n    if (hadBadFinishReason(firstCandidate)) {\n      message += `Candidate was blocked due to ${firstCandidate.finishReason}`;\n      if (firstCandidate.finishMessage) {\n        message += `: ${firstCandidate.finishMessage}`;\n      }\n    }\n  }\n  return message;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  EnhancedGenerateContentResponse,\n  GenerateContentCandidate,\n  GenerateContentResponse,\n  GenerateContentStreamResult,\n  Part,\n  VertexAIErrorCode\n} from '../types';\nimport { VertexAIError } from '../errors';\nimport { addHelpers } from './response-helpers';\n\nconst responseLineRE = /^data\\: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n\n/**\n * Process a response.body stream from the backend and return an\n * iterator that provides one complete GenerateContentResponse at a time\n * and a promise that resolves with a single aggregated\n * GenerateContentResponse.\n *\n * @param response - Response from a fetch call\n */\nexport function processStream(response: Response): GenerateContentStreamResult {\n  const inputStream = response.body!.pipeThrough(\n    new TextDecoderStream('utf8', { fatal: true })\n  );\n  const responseStream =\n    getResponseStream<GenerateContentResponse>(inputStream);\n  const [stream1, stream2] = responseStream.tee();\n  return {\n    stream: generateResponseSequence(stream1),\n    response: getResponsePromise(stream2)\n  };\n}\n\nasync function getResponsePromise(\n  stream: ReadableStream<GenerateContentResponse>\n): Promise<EnhancedGenerateContentResponse> {\n  const allResponses: GenerateContentResponse[] = [];\n  const reader = stream.getReader();\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) {\n      return addHelpers(aggregateResponses(allResponses));\n    }\n    allResponses.push(value);\n  }\n}\n\nasync function* generateResponseSequence(\n  stream: ReadableStream<GenerateContentResponse>\n): AsyncGenerator<EnhancedGenerateContentResponse> {\n  const reader = stream.getReader();\n  while (true) {\n    const { value, done } = await reader.read();\n    if (done) {\n      break;\n    }\n    yield addHelpers(value);\n  }\n}\n\n/**\n * Reads a raw stream from the fetch response and join incomplete\n * chunks, returning a new stream that provides a single complete\n * GenerateContentResponse in each iteration.\n */\nexport function getResponseStream<T>(\n  inputStream: ReadableStream<string>\n): ReadableStream<T> {\n  const reader = inputStream.getReader();\n  const stream = new ReadableStream<T>({\n    start(controller) {\n      let currentText = '';\n      return pump();\n      function pump(): Promise<(() => Promise<void>) | undefined> {\n        return reader.read().then(({ value, done }) => {\n          if (done) {\n            if (currentText.trim()) {\n              controller.error(\n                new VertexAIError(\n                  VertexAIErrorCode.PARSE_FAILED,\n                  'Failed to parse stream'\n                )\n              );\n              return;\n            }\n            controller.close();\n            return;\n          }\n\n          currentText += value;\n          let match = currentText.match(responseLineRE);\n          let parsedResponse: T;\n          while (match) {\n            try {\n              parsedResponse = JSON.parse(match[1]);\n            } catch (e) {\n              controller.error(\n                new VertexAIError(\n                  VertexAIErrorCode.PARSE_FAILED,\n                  `Error parsing JSON response: \"${match[1]}`\n                )\n              );\n              return;\n            }\n            controller.enqueue(parsedResponse);\n            currentText = currentText.substring(match[0].length);\n            match = currentText.match(responseLineRE);\n          }\n          return pump();\n        });\n      }\n    }\n  });\n  return stream;\n}\n\n/**\n * Aggregates an array of `GenerateContentResponse`s into a single\n * GenerateContentResponse.\n */\nexport function aggregateResponses(\n  responses: GenerateContentResponse[]\n): GenerateContentResponse {\n  const lastResponse = responses[responses.length - 1];\n  const aggregatedResponse: GenerateContentResponse = {\n    promptFeedback: lastResponse?.promptFeedback\n  };\n  for (const response of responses) {\n    if (response.candidates) {\n      for (const candidate of response.candidates) {\n        const i = candidate.index;\n        if (!aggregatedResponse.candidates) {\n          aggregatedResponse.candidates = [];\n        }\n        if (!aggregatedResponse.candidates[i]) {\n          aggregatedResponse.candidates[i] = {\n            index: candidate.index\n          } as GenerateContentCandidate;\n        }\n        // Keep overwriting, the last one will be final\n        aggregatedResponse.candidates[i].citationMetadata =\n          candidate.citationMetadata;\n        aggregatedResponse.candidates[i].finishReason = candidate.finishReason;\n        aggregatedResponse.candidates[i].finishMessage =\n          candidate.finishMessage;\n        aggregatedResponse.candidates[i].safetyRatings =\n          candidate.safetyRatings;\n\n        /**\n         * Candidates should always have content and parts, but this handles\n         * possible malformed responses.\n         */\n        if (candidate.content && candidate.content.parts) {\n          if (!aggregatedResponse.candidates[i].content) {\n            aggregatedResponse.candidates[i].content = {\n              role: candidate.content.role || 'user',\n              parts: []\n            };\n          }\n          const newPart: Partial<Part> = {};\n          for (const part of candidate.content.parts) {\n            if (part.text) {\n              newPart.text = part.text;\n            }\n            if (part.functionCall) {\n              newPart.functionCall = part.functionCall;\n            }\n            if (Object.keys(newPart).length === 0) {\n              newPart.text = '';\n            }\n            aggregatedResponse.candidates[i].content.parts.push(\n              newPart as Part\n            );\n          }\n        }\n      }\n    }\n  }\n  return aggregatedResponse;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GenerateContentRequest,\n  GenerateContentResponse,\n  GenerateContentResult,\n  GenerateContentStreamResult,\n  RequestOptions\n} from '../types';\nimport { Task, makeRequest } from '../requests/request';\nimport { addHelpers } from '../requests/response-helpers';\nimport { processStream } from '../requests/stream-reader';\nimport { ApiSettings } from '../types/internal';\n\nexport async function generateContentStream(\n  apiSettings: ApiSettings,\n  model: string,\n  params: GenerateContentRequest,\n  requestOptions?: RequestOptions\n): Promise<GenerateContentStreamResult> {\n  const response = await makeRequest(\n    model,\n    Task.STREAM_GENERATE_CONTENT,\n    apiSettings,\n    /* stream */ true,\n    JSON.stringify(params),\n    requestOptions\n  );\n  return processStream(response);\n}\n\nexport async function generateContent(\n  apiSettings: ApiSettings,\n  model: string,\n  params: GenerateContentRequest,\n  requestOptions?: RequestOptions\n): Promise<GenerateContentResult> {\n  const response = await makeRequest(\n    model,\n    Task.GENERATE_CONTENT,\n    apiSettings,\n    /* stream */ false,\n    JSON.stringify(params),\n    requestOptions\n  );\n  const responseJson: GenerateContentResponse = await response.json();\n  const enhancedResponse = addHelpers(responseJson);\n  return {\n    response: enhancedResponse\n  };\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Content,\n  GenerateContentRequest,\n  Part,\n  VertexAIErrorCode\n} from '../types';\nimport { VertexAIError } from '../errors';\n\nexport function formatSystemInstruction(\n  input?: string | Part | Content\n): Content | undefined {\n  // null or undefined\n  if (input == null) {\n    return undefined;\n  } else if (typeof input === 'string') {\n    return { role: 'system', parts: [{ text: input }] } as Content;\n  } else if ((input as Part).text) {\n    return { role: 'system', parts: [input as Part] };\n  } else if ((input as Content).parts) {\n    if (!(input as Content).role) {\n      return { role: 'system', parts: (input as Content).parts };\n    } else {\n      return input as Content;\n    }\n  }\n}\n\nexport function formatNewContent(\n  request: string | Array<string | Part>\n): Content {\n  let newParts: Part[] = [];\n  if (typeof request === 'string') {\n    newParts = [{ text: request }];\n  } else {\n    for (const partOrString of request) {\n      if (typeof partOrString === 'string') {\n        newParts.push({ text: partOrString });\n      } else {\n        newParts.push(partOrString);\n      }\n    }\n  }\n  return assignRoleToPartsAndValidateSendMessageRequest(newParts);\n}\n\n/**\n * When multiple Part types (i.e. FunctionResponsePart and TextPart) are\n * passed in a single Part array, we may need to assign different roles to each\n * part. Currently only FunctionResponsePart requires a role other than 'user'.\n * @private\n * @param parts Array of parts to pass to the model\n * @returns Array of content items\n */\nfunction assignRoleToPartsAndValidateSendMessageRequest(\n  parts: Part[]\n): Content {\n  const userContent: Content = { role: 'user', parts: [] };\n  const functionContent: Content = { role: 'function', parts: [] };\n  let hasUserContent = false;\n  let hasFunctionContent = false;\n  for (const part of parts) {\n    if ('functionResponse' in part) {\n      functionContent.parts.push(part);\n      hasFunctionContent = true;\n    } else {\n      userContent.parts.push(part);\n      hasUserContent = true;\n    }\n  }\n\n  if (hasUserContent && hasFunctionContent) {\n    throw new VertexAIError(\n      VertexAIErrorCode.INVALID_CONTENT,\n      'Within a single message, FunctionResponse cannot be mixed with other type of Part in the request for sending chat message.'\n    );\n  }\n\n  if (!hasUserContent && !hasFunctionContent) {\n    throw new VertexAIError(\n      VertexAIErrorCode.INVALID_CONTENT,\n      'No Content is provided for sending chat message.'\n    );\n  }\n\n  if (hasUserContent) {\n    return userContent;\n  }\n\n  return functionContent;\n}\n\nexport function formatGenerateContentInput(\n  params: GenerateContentRequest | string | Array<string | Part>\n): GenerateContentRequest {\n  let formattedRequest: GenerateContentRequest;\n  if ((params as GenerateContentRequest).contents) {\n    formattedRequest = params as GenerateContentRequest;\n  } else {\n    // Array or string\n    const content = formatNewContent(params as string | Array<string | Part>);\n    formattedRequest = { contents: [content] };\n  }\n  if ((params as GenerateContentRequest).systemInstruction) {\n    formattedRequest.systemInstruction = formatSystemInstruction(\n      (params as GenerateContentRequest).systemInstruction\n    );\n  }\n  return formattedRequest;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Content,\n  POSSIBLE_ROLES,\n  Part,\n  Role,\n  VertexAIErrorCode\n} from '../types';\nimport { VertexAIError } from '../errors';\n\n// https://ai.google.dev/api/rest/v1beta/Content#part\n\nconst VALID_PART_FIELDS: Array<keyof Part> = [\n  'text',\n  'inlineData',\n  'functionCall',\n  'functionResponse'\n];\n\nconst VALID_PARTS_PER_ROLE: { [key in Role]: Array<keyof Part> } = {\n  user: ['text', 'inlineData'],\n  function: ['functionResponse'],\n  model: ['text', 'functionCall'],\n  // System instructions shouldn't be in history anyway.\n  system: ['text']\n};\n\nconst VALID_PREVIOUS_CONTENT_ROLES: { [key in Role]: Role[] } = {\n  user: ['model'],\n  function: ['model'],\n  model: ['user', 'function'],\n  // System instructions shouldn't be in history.\n  system: []\n};\n\nexport function validateChatHistory(history: Content[]): void {\n  let prevContent: Content | null = null;\n  for (const currContent of history) {\n    const { role, parts } = currContent;\n    if (!prevContent && role !== 'user') {\n      throw new VertexAIError(\n        VertexAIErrorCode.INVALID_CONTENT,\n        `First Content should be with role 'user', got ${role}`\n      );\n    }\n    if (!POSSIBLE_ROLES.includes(role)) {\n      throw new VertexAIError(\n        VertexAIErrorCode.INVALID_CONTENT,\n        `Each item should include role field. Got ${role} but valid roles are: ${JSON.stringify(\n          POSSIBLE_ROLES\n        )}`\n      );\n    }\n\n    if (!Array.isArray(parts)) {\n      throw new VertexAIError(\n        VertexAIErrorCode.INVALID_CONTENT,\n        `Content should have 'parts' but property with an array of Parts`\n      );\n    }\n\n    if (parts.length === 0) {\n      throw new VertexAIError(\n        VertexAIErrorCode.INVALID_CONTENT,\n        `Each Content should have at least one part`\n      );\n    }\n\n    const countFields: Record<keyof Part, number> = {\n      text: 0,\n      inlineData: 0,\n      functionCall: 0,\n      functionResponse: 0\n    };\n\n    for (const part of parts) {\n      for (const key of VALID_PART_FIELDS) {\n        if (key in part) {\n          countFields[key] += 1;\n        }\n      }\n    }\n    const validParts = VALID_PARTS_PER_ROLE[role];\n    for (const key of VALID_PART_FIELDS) {\n      if (!validParts.includes(key) && countFields[key] > 0) {\n        throw new VertexAIError(\n          VertexAIErrorCode.INVALID_CONTENT,\n          `Content with role '${role}' can't contain '${key}' part`\n        );\n      }\n    }\n\n    if (prevContent) {\n      const validPreviousContentRoles = VALID_PREVIOUS_CONTENT_ROLES[role];\n      if (!validPreviousContentRoles.includes(prevContent.role)) {\n        throw new VertexAIError(\n          VertexAIErrorCode.INVALID_CONTENT,\n          `Content with role '${role} can't follow '${\n            prevContent.role\n          }'. Valid previous roles: ${JSON.stringify(\n            VALID_PREVIOUS_CONTENT_ROLES\n          )}`\n        );\n      }\n    }\n    prevContent = currContent;\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Content,\n  GenerateContentRequest,\n  GenerateContentResult,\n  GenerateContentStreamResult,\n  Part,\n  RequestOptions,\n  StartChatParams\n} from '../types';\nimport { formatNewContent } from '../requests/request-helpers';\nimport { formatBlockErrorMessage } from '../requests/response-helpers';\nimport { validateChatHistory } from './chat-session-helpers';\nimport { generateContent, generateContentStream } from './generate-content';\nimport { ApiSettings } from '../types/internal';\n\n/**\n * Do not log a message for this error.\n */\nconst SILENT_ERROR = 'SILENT_ERROR';\n\n/**\n * ChatSession class that enables sending chat messages and stores\n * history of sent and received messages so far.\n *\n * @public\n */\nexport class ChatSession {\n  private _apiSettings: ApiSettings;\n  private _history: Content[] = [];\n  private _sendPromise: Promise<void> = Promise.resolve();\n\n  constructor(\n    apiSettings: ApiSettings,\n    public model: string,\n    public params?: StartChatParams,\n    public requestOptions?: RequestOptions\n  ) {\n    this._apiSettings = apiSettings;\n    if (params?.history) {\n      validateChatHistory(params.history);\n      this._history = params.history;\n    }\n  }\n\n  /**\n   * Gets the chat history so far. Blocked prompts are not added to history.\n   * Neither blocked candidates nor the prompts that generated them are added\n   * to history.\n   */\n  async getHistory(): Promise<Content[]> {\n    await this._sendPromise;\n    return this._history;\n  }\n\n  /**\n   * Sends a chat message and receives a non-streaming\n   * {@link GenerateContentResult}\n   */\n  async sendMessage(\n    request: string | Array<string | Part>\n  ): Promise<GenerateContentResult> {\n    await this._sendPromise;\n    const newContent = formatNewContent(request);\n    const generateContentRequest: GenerateContentRequest = {\n      safetySettings: this.params?.safetySettings,\n      generationConfig: this.params?.generationConfig,\n      tools: this.params?.tools,\n      toolConfig: this.params?.toolConfig,\n      systemInstruction: this.params?.systemInstruction,\n      contents: [...this._history, newContent]\n    };\n    let finalResult = {} as GenerateContentResult;\n    // Add onto the chain.\n    this._sendPromise = this._sendPromise\n      .then(() =>\n        generateContent(\n          this._apiSettings,\n          this.model,\n          generateContentRequest,\n          this.requestOptions\n        )\n      )\n      .then(result => {\n        if (\n          result.response.candidates &&\n          result.response.candidates.length > 0\n        ) {\n          this._history.push(newContent);\n          const responseContent: Content = {\n            parts: result.response.candidates?.[0].content.parts || [],\n            // Response seems to come back without a role set.\n            role: result.response.candidates?.[0].content.role || 'model'\n          };\n          this._history.push(responseContent);\n        } else {\n          const blockErrorMessage = formatBlockErrorMessage(result.response);\n          if (blockErrorMessage) {\n            console.warn(\n              `sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`\n            );\n          }\n        }\n        finalResult = result;\n      });\n    await this._sendPromise;\n    return finalResult;\n  }\n\n  /**\n   * Sends a chat message and receives the response as a\n   * {@link GenerateContentStreamResult} containing an iterable stream\n   * and a response promise.\n   */\n  async sendMessageStream(\n    request: string | Array<string | Part>\n  ): Promise<GenerateContentStreamResult> {\n    await this._sendPromise;\n    const newContent = formatNewContent(request);\n    const generateContentRequest: GenerateContentRequest = {\n      safetySettings: this.params?.safetySettings,\n      generationConfig: this.params?.generationConfig,\n      tools: this.params?.tools,\n      toolConfig: this.params?.toolConfig,\n      systemInstruction: this.params?.systemInstruction,\n      contents: [...this._history, newContent]\n    };\n    const streamPromise = generateContentStream(\n      this._apiSettings,\n      this.model,\n      generateContentRequest,\n      this.requestOptions\n    );\n\n    // Add onto the chain.\n    this._sendPromise = this._sendPromise\n      .then(() => streamPromise)\n      // This must be handled to avoid unhandled rejection, but jump\n      // to the final catch block with a label to not log this error.\n      .catch(_ignored => {\n        throw new Error(SILENT_ERROR);\n      })\n      .then(streamResult => streamResult.response)\n      .then(response => {\n        if (response.candidates && response.candidates.length > 0) {\n          this._history.push(newContent);\n          const responseContent = { ...response.candidates[0].content };\n          // Response seems to come back without a role set.\n          if (!responseContent.role) {\n            responseContent.role = 'model';\n          }\n          this._history.push(responseContent);\n        } else {\n          const blockErrorMessage = formatBlockErrorMessage(response);\n          if (blockErrorMessage) {\n            console.warn(\n              `sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`\n            );\n          }\n        }\n      })\n      .catch(e => {\n        // Errors in streamPromise are already catchable by the user as\n        // streamPromise is returned.\n        // Avoid duplicating the error message in logs.\n        if (e.message !== SILENT_ERROR) {\n          // Users do not have access to _sendPromise to catch errors\n          // downstream from streamPromise, so they should not throw.\n          console.error(e);\n        }\n      });\n    return streamPromise;\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CountTokensRequest,\n  CountTokensResponse,\n  RequestOptions\n} from '../types';\nimport { Task, makeRequest } from '../requests/request';\nimport { ApiSettings } from '../types/internal';\n\nexport async function countTokens(\n  apiSettings: ApiSettings,\n  model: string,\n  params: CountTokensRequest,\n  requestOptions?: RequestOptions\n): Promise<CountTokensResponse> {\n  const response = await makeRequest(\n    model,\n    Task.COUNT_TOKENS,\n    apiSettings,\n    false,\n    JSON.stringify(params),\n    requestOptions\n  );\n  return response.json();\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateContent,\n  generateContentStream\n} from '../methods/generate-content';\nimport {\n  Content,\n  CountTokensRequest,\n  CountTokensResponse,\n  GenerateContentRequest,\n  GenerateContentResult,\n  GenerateContentStreamResult,\n  GenerationConfig,\n  ModelParams,\n  Part,\n  RequestOptions,\n  SafetySetting,\n  StartChatParams,\n  Tool,\n  ToolConfig,\n  VertexAIErrorCode\n} from '../types';\nimport { VertexAIError } from '../errors';\nimport { ChatSession } from '../methods/chat-session';\nimport { countTokens } from '../methods/count-tokens';\nimport {\n  formatGenerateContentInput,\n  formatSystemInstruction\n} from '../requests/request-helpers';\nimport { VertexAI } from '../public-types';\nimport { ApiSettings } from '../types/internal';\nimport { VertexAIService } from '../service';\n\n/**\n * Class for generative model APIs.\n * @public\n */\nexport class GenerativeModel {\n  private _apiSettings: ApiSettings;\n  model: string;\n  generationConfig: GenerationConfig;\n  safetySettings: SafetySetting[];\n  requestOptions?: RequestOptions;\n  tools?: Tool[];\n  toolConfig?: ToolConfig;\n  systemInstruction?: Content;\n\n  constructor(\n    vertexAI: VertexAI,\n    modelParams: ModelParams,\n    requestOptions?: RequestOptions\n  ) {\n    if (!vertexAI.app?.options?.apiKey) {\n      throw new VertexAIError(\n        VertexAIErrorCode.NO_API_KEY,\n        `The \"apiKey\" field is empty in the local Firebase config. Firebase VertexAI requires this field to contain a valid API key.`\n      );\n    } else if (!vertexAI.app?.options?.projectId) {\n      throw new VertexAIError(\n        VertexAIErrorCode.NO_PROJECT_ID,\n        `The \"projectId\" field is empty in the local Firebase config. Firebase VertexAI requires this field to contain a valid project ID.`\n      );\n    } else {\n      this._apiSettings = {\n        apiKey: vertexAI.app.options.apiKey,\n        project: vertexAI.app.options.projectId,\n        location: vertexAI.location\n      };\n      if ((vertexAI as VertexAIService).appCheck) {\n        this._apiSettings.getAppCheckToken = () =>\n          (vertexAI as VertexAIService).appCheck!.getToken();\n      }\n\n      if ((vertexAI as VertexAIService).auth) {\n        this._apiSettings.getAuthToken = () =>\n          (vertexAI as VertexAIService).auth!.getToken();\n      }\n    }\n    if (modelParams.model.includes('/')) {\n      if (modelParams.model.startsWith('models/')) {\n        // Add \"publishers/google\" if the user is only passing in 'models/model-name'.\n        this.model = `publishers/google/${modelParams.model}`;\n      } else {\n        // Any other custom format (e.g. tuned models) must be passed in correctly.\n        this.model = modelParams.model;\n      }\n    } else {\n      // If path is not included, assume it's a non-tuned model.\n      this.model = `publishers/google/models/${modelParams.model}`;\n    }\n    this.generationConfig = modelParams.generationConfig || {};\n    this.safetySettings = modelParams.safetySettings || [];\n    this.tools = modelParams.tools;\n    this.toolConfig = modelParams.toolConfig;\n    this.systemInstruction = formatSystemInstruction(\n      modelParams.systemInstruction\n    );\n    this.requestOptions = requestOptions || {};\n  }\n\n  /**\n   * Makes a single non-streaming call to the model\n   * and returns an object containing a single {@link GenerateContentResponse}.\n   */\n  async generateContent(\n    request: GenerateContentRequest | string | Array<string | Part>\n  ): Promise<GenerateContentResult> {\n    const formattedParams = formatGenerateContentInput(request);\n    return generateContent(\n      this._apiSettings,\n      this.model,\n      {\n        generationConfig: this.generationConfig,\n        safetySettings: this.safetySettings,\n        tools: this.tools,\n        toolConfig: this.toolConfig,\n        systemInstruction: this.systemInstruction,\n        ...formattedParams\n      },\n      this.requestOptions\n    );\n  }\n\n  /**\n   * Makes a single streaming call to the model\n   * and returns an object containing an iterable stream that iterates\n   * over all chunks in the streaming response as well as\n   * a promise that returns the final aggregated response.\n   */\n  async generateContentStream(\n    request: GenerateContentRequest | string | Array<string | Part>\n  ): Promise<GenerateContentStreamResult> {\n    const formattedParams = formatGenerateContentInput(request);\n    return generateContentStream(\n      this._apiSettings,\n      this.model,\n      {\n        generationConfig: this.generationConfig,\n        safetySettings: this.safetySettings,\n        tools: this.tools,\n        toolConfig: this.toolConfig,\n        systemInstruction: this.systemInstruction,\n        ...formattedParams\n      },\n      this.requestOptions\n    );\n  }\n\n  /**\n   * Gets a new {@link ChatSession} instance which can be used for\n   * multi-turn chats.\n   */\n  startChat(startChatParams?: StartChatParams): ChatSession {\n    return new ChatSession(\n      this._apiSettings,\n      this.model,\n      {\n        tools: this.tools,\n        toolConfig: this.toolConfig,\n        systemInstruction: this.systemInstruction,\n        ...startChatParams\n      },\n      this.requestOptions\n    );\n  }\n\n  /**\n   * Counts the tokens in the provided request.\n   */\n  async countTokens(\n    request: CountTokensRequest | string | Array<string | Part>\n  ): Promise<CountTokensResponse> {\n    const formattedParams = formatGenerateContentInput(request);\n    return countTokens(this._apiSettings, this.model, formattedParams);\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport { getModularInstance } from '@firebase/util';\nimport { DEFAULT_LOCATION, VERTEX_TYPE } from './constants';\nimport { VertexAIService } from './service';\nimport { VertexAI, VertexAIOptions } from './public-types';\nimport { ModelParams, RequestOptions, VertexAIErrorCode } from './types';\nimport { VertexAIError } from './errors';\nimport { GenerativeModel } from './models/generative-model';\n\nexport { ChatSession } from './methods/chat-session';\n\nexport { GenerativeModel };\n\nexport { VertexAIError };\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    [VERTEX_TYPE]: VertexAIService;\n  }\n}\n\n/**\n * Returns a {@link VertexAI} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function getVertexAI(\n  app: FirebaseApp = getApp(),\n  options?: VertexAIOptions\n): VertexAI {\n  app = getModularInstance(app);\n  // Dependencies\n  const vertexProvider: Provider<'vertexAI'> = _getProvider(app, VERTEX_TYPE);\n\n  return vertexProvider.getImmediate({\n    identifier: options?.location || DEFAULT_LOCATION\n  });\n}\n\n/**\n * Returns a {@link GenerativeModel} class with methods for inference\n * and other functionality.\n *\n * @public\n */\nexport function getGenerativeModel(\n  vertexAI: VertexAI,\n  modelParams: ModelParams,\n  requestOptions?: RequestOptions\n): GenerativeModel {\n  if (!modelParams.model) {\n    throw new VertexAIError(\n      VertexAIErrorCode.NO_MODEL,\n      `Must provide a model name. Example: getGenerativeModel({ model: 'my-model-name' })`\n    );\n  }\n  return new GenerativeModel(vertexAI, modelParams, requestOptions);\n}\n", "/**\n * The Vertex AI in Firebase Web SDK.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport { VertexAIService } from './service';\nimport { VERTEX_TYPE } from './constants';\nimport { Component, ComponentType } from '@firebase/component';\nimport { name, version } from '../package.json';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\nfunction registerVertex(): void {\n  _registerComponent(\n    new Component(\n      VERTEX_TYPE,\n      (container, { instanceIdentifier: location }) => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const auth = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return new VertexAIService(app, auth, appCheckProvider, { location });\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterVertex();\n\nexport * from './api';\nexport * from './public-types';\n"],
  "mappings": "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",
  "names": ["Task", "HarmCategory", "HarmBlockThreshold", "HarmBlockMethod", "HarmProbability", "HarmSeverity", "BlockReason", "FinishReason", "FunctionCallingMode", "FunctionDeclarationSchemaType", "_a", "_b"]
}

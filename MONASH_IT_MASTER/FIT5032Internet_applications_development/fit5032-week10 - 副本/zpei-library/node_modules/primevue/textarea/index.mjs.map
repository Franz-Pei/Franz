{"version":3,"file":"index.mjs","sources":["../../src/textarea/BaseTextarea.vue","../../src/textarea/Textarea.vue","../../src/textarea/Textarea.vue?vue&type=template&id=5443acc3&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TextareaStyle from 'primevue/textarea/style';\n\nexport default {\n    name: 'BaseTextarea',\n    extends: BaseComponent,\n    props: {\n        modelValue: null,\n        autoResize: Boolean,\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        variant: {\n            type: String,\n            default: null\n        },\n        fluid: {\n            type: Boolean,\n            default: null\n        }\n    },\n    style: TextareaStyle,\n    provide() {\n        return {\n            $pcTextarea: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <textarea :class=\"cx('root')\" :value=\"modelValue\" :aria-invalid=\"invalid || undefined\" @input=\"onInput\" v-bind=\"ptmi('root', ptmParams)\"></textarea>\n</template>\n\n<script>\nimport { isEmpty } from '@primeuix/utils/object';\nimport BaseTextarea from './BaseTextarea.vue';\n\nexport default {\n    name: 'Textarea',\n    extends: BaseTextarea,\n    inheritAttrs: false,\n    emits: ['update:modelValue'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    mounted() {\n        if (this.$el.offsetParent && this.autoResize) {\n            this.resize();\n        }\n    },\n    updated() {\n        if (this.$el.offsetParent && this.autoResize) {\n            this.resize();\n        }\n    },\n    methods: {\n        resize() {\n            this.$el.style.height = 'auto';\n            this.$el.style.height = this.$el.scrollHeight + 'px';\n\n            if (parseFloat(this.$el.style.height) >= parseFloat(this.$el.style.maxHeight)) {\n                this.$el.style.overflowY = 'scroll';\n                this.$el.style.height = this.$el.style.maxHeight;\n            } else {\n                this.$el.style.overflow = 'hidden';\n            }\n        },\n        onInput(event) {\n            if (this.autoResize) {\n                this.resize();\n            }\n\n            this.$emit('update:modelValue', event.target.value);\n        }\n    },\n    computed: {\n        filled() {\n            return this.modelValue != null && this.modelValue.toString().length > 0;\n        },\n        ptmParams() {\n            return {\n                context: {\n                    disabled: this.$attrs.disabled || this.$attrs.disabled === ''\n                }\n            };\n        },\n        hasFluid() {\n            return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n        }\n    }\n};\n</script>\n","<template>\n    <textarea :class=\"cx('root')\" :value=\"modelValue\" :aria-invalid=\"invalid || undefined\" @input=\"onInput\" v-bind=\"ptmi('root', ptmParams)\"></textarea>\n</template>\n\n<script>\nimport { isEmpty } from '@primeuix/utils/object';\nimport BaseTextarea from './BaseTextarea.vue';\n\nexport default {\n    name: 'Textarea',\n    extends: BaseTextarea,\n    inheritAttrs: false,\n    emits: ['update:modelValue'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    mounted() {\n        if (this.$el.offsetParent && this.autoResize) {\n            this.resize();\n        }\n    },\n    updated() {\n        if (this.$el.offsetParent && this.autoResize) {\n            this.resize();\n        }\n    },\n    methods: {\n        resize() {\n            this.$el.style.height = 'auto';\n            this.$el.style.height = this.$el.scrollHeight + 'px';\n\n            if (parseFloat(this.$el.style.height) >= parseFloat(this.$el.style.maxHeight)) {\n                this.$el.style.overflowY = 'scroll';\n                this.$el.style.height = this.$el.style.maxHeight;\n            } else {\n                this.$el.style.overflow = 'hidden';\n            }\n        },\n        onInput(event) {\n            if (this.autoResize) {\n                this.resize();\n            }\n\n            this.$emit('update:modelValue', event.target.value);\n        }\n    },\n    computed: {\n        filled() {\n            return this.modelValue != null && this.modelValue.toString().length > 0;\n        },\n        ptmParams() {\n            return {\n                context: {\n                    disabled: this.$attrs.disabled || this.$attrs.disabled === ''\n                }\n            };\n        },\n        hasFluid() {\n            return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n        }\n    }\n};\n</script>\n"],"names":["name","BaseComponent","props","modelValue","autoResize","Boolean","invalid","type","variant","String","fluid","style","TextareaStyle","provide","$pcTextarea","$parentInstance","BaseTextarea","inheritAttrs","emits","inject","$pcFluid","mounted","$el","offsetParent","resize","updated","methods","height","scrollHeight","parseFloat","maxHeight","overflowY","overflow","onInput","event","$emit","target","value","computed","filled","toString","length","ptmParams","context","disabled","$attrs","hasFluid","isEmpty","_openBlock","_createElementBlock","_mergeProps","_ctx","cx","undefined","$options","apply","arguments","ptmi","_hoisted_1"],"mappings":"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"}
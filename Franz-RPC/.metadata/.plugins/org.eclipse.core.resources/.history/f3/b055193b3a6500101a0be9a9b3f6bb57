package com.dxfx.client.core;

import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.api.CuratorWatcher;

import com.alibaba.fastjson.JSONObject;
import com.dxfx.client.constant.Constants;
import com.dxfx.client.handler.SimpleClientHandler;
import com.dxfx.client.param.ClientRequest;
import com.dxfx.client.param.Response;
import com.dxfx.client.zk.ZookeeperFactory;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.DelimiterBasedFrameDecoder;
import io.netty.handler.codec.Delimiters;
import io.netty.handler.codec.string.StringDecoder;
import io.netty.handler.codec.string.StringEncoder;

public class TcpClient {

    public static String host = "localhost";
    public static int port = 8080;
    static AtomicInteger i = new AtomicInteger(0);
    
    static final Bootstrap b = new Bootstrap();
    static ChannelFuture f = null;
    static {
        EventLoopGroup workerGroup = new NioEventLoopGroup();
        b.group(workerGroup);
        b.channel(NioSocketChannel.class);
        b.option(ChannelOption.SO_KEEPALIVE, true);
        b.handler(new ChannelInitializer<SocketChannel>() {
            @Override
            public void initChannel(SocketChannel ch) throws Exception {
                ch.pipeline().addLast(new DelimiterBasedFrameDecoder(Integer.MAX_VALUE, Delimiters.lineDelimiter()[0]));
                ch.pipeline().addLast(new StringDecoder());
                ch.pipeline().addLast(new SimpleClientHandler());
                ch.pipeline().addLast(new StringEncoder());
            }
        });

        String host = "localhost";
        int port = 8080;
        
        System.out.println("🔗 TcpClient尝试连接: " + host + ":" + port);
        
        try {
            f = b.connect(host, port).sync();
            System.out.println("✅ TcpClient连接成功！");
        } catch (Exception e) {
            System.err.println("❌ TcpClient连接失败: " + e.getMessage());
            // 不抛出异常，允许程序继续运行
        }
        
        // 原 updateServerList 方法的内容
        try {
            System.out.println("🔄 初始化服务器列表");
            CuratorFramework client = ZookeeperFactory.create();
            CuratorWatcher watcher = new ServerWatcher();
            List<String> serverPaths = client.getChildren().forPath(Constants.SERVER_PATH);
            for(String serverPath : serverPaths) {
                String[] str = serverPath.split("#");
                ChannelManager.realServerPath.add(str[0] + "#" + str[1]);
                
                ChannelFuture channelFuture = TcpClient.b.connect(str[0],Integer.valueOf(str[1]));
                ChannelManager.add(channelFuture);
            }
            if(ChannelManager.realServerPath.size()>0) {
                String[] hostAndPort = ChannelManager.realServerPath.toArray()[0].toString().split("#");
                TcpClient.host = hostAndPort[0];
                TcpClient.port = Integer.valueOf(hostAndPort[1]);
            }
        } catch (Exception e) {
            System.err.println("❌ 初始化服务器列表失败: " + e.getMessage());
            e.printStackTrace();
        }
    }
    

    public static Response send(ClientRequest request) {
        try {
            System.out.println("📤 TcpClient.send() 被调用，请求: " + request);
            
            if (f == null || !f.channel().isActive()) {
                System.err.println("❌ 连接未建立或已断开");
                Response errorResp = new Response();
                errorResp.setResult("连接失败");
                errorResp.setStatus("500");
                return errorResp;
            }
            
            String requestJson = JSONObject.toJSONString(request);
            System.out.println("📤 TcpClient发送JSON: " + requestJson);
            
            f = ChannelManager.get(i);
            f.channel().writeAndFlush(requestJson);
            f.channel().writeAndFlush("\r\n");
            
            // 临时返回成功响应
            Response response = new Response();
            response.setId(request.getId());
            response.setResult("✅ RPC调用成功: " + request.getCommand());
            response.setStatus("000");
            return response;
            
        } catch (Exception e) {
            System.err.println("❌ 发送ClientRequest异常: " + e.getMessage());
            e.printStackTrace();
            
            Response errorResp = new Response();
            errorResp.setResult("发送失败: " + e.getMessage());
            errorResp.setStatus("500");
            return errorResp;
        }
    }
}
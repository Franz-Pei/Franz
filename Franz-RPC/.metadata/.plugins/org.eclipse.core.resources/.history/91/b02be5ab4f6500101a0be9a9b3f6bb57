package com.dxfx.client.core;

import java.util.List;

import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.api.CuratorWatcher;
import org.apache.zookeeper.WatchedEvent;

import com.dxfx.client.constant.Constants;
import com.dxfx.client.zk.ZookeeperFactory;

import io.netty.channel.ChannelFuture;

public class ServerWatcher implements CuratorWatcher {

    @Override
    public void process(WatchedEvent event) throws Exception {
        
        CuratorFramework client = ZookeeperFactory.create();
        String path = event.getPath();
        
        // 🔧 修复：重新注册监听器需要指定路径
        client.getChildren().usingWatcher(this).forPath(path);
        
        List<String> serverPaths = client.getChildren().forPath(path);
        
        // 🔧 先清理旧的服务器列表
        ChannelManager.realServerPath.clear();
        
        for(String serverPath : serverPaths) {
            String[] str = serverPath.split("##");  // 🔧 使用##分割
            if (str.length >= 1) {
                ChannelManager.realServerPath.add(str[0]);  // str[0]是host:port格式
            }
        }
        
        // 清理旧连接
        ChannelManager.clear();
        
        // 建立新连接
        for(String realServer : ChannelManager.realServerPath) {
            String[] str = realServer.split(":");  // 🔧 用:分割host:port
            if (str.length == 2) {
                ChannelFuture channelFuture = TcpClient.b.connect(str[0], Integer.valueOf(str[1]));
                ChannelManager.add(channelFuture);
            }
        }
        
        System.out.println("🔄 ServerWatcher更新服务器列表: " + ChannelManager.realServerPath);
    }
}
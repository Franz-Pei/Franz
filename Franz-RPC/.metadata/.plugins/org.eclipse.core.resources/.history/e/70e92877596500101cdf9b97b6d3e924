package com.dxfx.client.core;

import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.api.CuratorWatcher;

import com.alibaba.fastjson.JSONObject;
import com.dxfx.client.constant.Constants;
import com.dxfx.client.handler.SimpleClientHandler;
import com.dxfx.client.param.ClientRequest;
import com.dxfx.client.param.Response;
import com.dxfx.client.zk.ZookeeperFactory;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.DelimiterBasedFrameDecoder;
import io.netty.handler.codec.Delimiters;
import io.netty.handler.codec.string.StringDecoder;
import io.netty.handler.codec.string.StringEncoder;

public class TcpClient {

    public static String host = "localhost";
    public static int port = 8080;
    static AtomicInteger i = new AtomicInteger(0);
    
    static final Bootstrap b = new Bootstrap();
    static ChannelFuture f = null;
    static {
        EventLoopGroup workerGroup = new NioEventLoopGroup();
        b.group(workerGroup);
        b.channel(NioSocketChannel.class);
        b.option(ChannelOption.SO_KEEPALIVE, true);
        b.handler(new ChannelInitializer<SocketChannel>() {
            @Override
            public void initChannel(SocketChannel ch) throws Exception {
                ch.pipeline().addLast(new DelimiterBasedFrameDecoder(Integer.MAX_VALUE, Delimiters.lineDelimiter()[0]));
                ch.pipeline().addLast(new StringDecoder());
                ch.pipeline().addLast(new SimpleClientHandler());
                ch.pipeline().addLast(new StringEncoder());
            }
        });
        CuratorFramework client = ZookeeperFactory.create();
        String host = "localhost";
        int port = 8080;
               
        // 原 updateServerList 方法的内容
        try {
            System.out.println("🔄 初始化服务器列表");
            CuratorWatcher watcher = new ServerWatcher();
            client.getChildren().usingWatcher(watcher).forPath(Constants.SERVER_PATH);
            List<String> serverPaths = client.getChildren().forPath(Constants.SERVER_PATH);
            for(String serverPath : serverPaths) {
                String[] str = serverPath.split("#");
                if(str.length >=2) {
                    int weight = Integer.valueOf(str[1]);
                    if(weight > 0) {
                    	 for(int w=0; w<weight;w++) {
                    		 ChannelManager.realServerPath.add(str[0]);
                    		 String[] hostPort = str[0].split(":");
                             if (hostPort.length == 2) {
                                 ChannelFuture channelFuture = TcpClient.b.connect(hostPort[0], Integer.valueOf(hostPort[1]));
                                 ChannelManager.add(channelFuture);
                             }
                    	 }
                    }
                   

                }
                	
            }

            if(ChannelManager.realServerPath.size()>0) {
                String[] hostAndPort = ChannelManager.realServerPath.toArray()[0].toString().split(":");
                TcpClient.host = hostAndPort[0];
                TcpClient.port = Integer.valueOf(hostAndPort[1]);
            }
        } catch (Exception e) {
            System.err.println("❌ 初始化服务器列表失败: " + e.getMessage());
            e.printStackTrace();
        }
    }
    

    public static Response send(ClientRequest request) {
        try {
            System.out.println("📤 TcpClient.send() 被调用，请求: " + request);
            
            if (f == null || !f.channel().isActive()) {
                System.err.println("❌ 连接未建立或已断开");
                Response errorResp = new Response();
                errorResp.setResult("连接失败");
                errorResp.setStatus("500");
                return errorResp;
            }
            
            String requestJson = JSONObject.toJSONString(request);
            System.out.println("📤 TcpClient发送JSON: " + requestJson);
            
            f = ChannelManager.get(ChannelManager.position);
            f.channel().writeAndFlush(JSONObject.toJSONString(request));
            f.channel().writeAndFlush("\r\n");
            DefaultFuture df = new DefaultFuture(request);
            return df.get();
            
        } catch (Exception e) {
            System.err.println("❌ 发送ClientRequest异常: " + e.getMessage());
            e.printStackTrace();
            
            Response errorResp = new Response();
            errorResp.setResult("发送失败: " + e.getMessage());
            errorResp.setStatus("500");
            return errorResp;
        }
    }
}